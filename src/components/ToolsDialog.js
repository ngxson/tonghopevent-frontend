import React from 'react'
import List from '@material-ui/core/List'
import ListItem from '@material-ui/core/ListItem'
import ListItemText from '@material-ui/core/ListItemText'
import DialogTitle from '@material-ui/core/DialogTitle'
import Dialog from '@material-ui/core/Dialog'
import CircularProgress from '@material-ui/core/CircularProgress'
import Divider from '@material-ui/core/Divider'
import Utils from '../Utils'
import Config from '../Config'
import PropTypes from 'prop-types'
import { toast } from 'react-toastify'

const TEMPLATES = [
  {
    desc: 'Th√¥ng b√°o tr√πng b√†i',
    text: '‚¨¢ ƒê√£ c√≥ ng∆∞·ªùi nh·∫≠p th√¥ng tin c·ªßa d·ª± √°n / cu·ªôc thi / s·ª± ki·ªán n√†y. Kh√¥ng bi·∫øt b·∫°n c√≥ mu·ªën b·ªï sung hay thay ƒë·ªïi g√¨ kh√¥ng nh·ªâ? N·∫øu kh√¥ng, ch√∫ng m√¨nh s·∫Ω x√≥a th√¥ng tin b·∫°n ƒë√£ nh·∫≠p ƒë·ªÉ kh√¥ng b·ªã tr√πng v·ªõi b√†i ƒë√£ ƒëƒÉng.'
  }, {
    desc: 'B√°o b·ªã x√≥a v√¨ tr√πng',
    text: '‚¨¢ B√†i c·ªßa b·∫°n ƒë√£ b·ªã x√≥a do tr√πng v·ªõi b√†i ƒë√£ ƒëƒÉng tr√™n fanpage.'
  }, {
    desc: 'B√°o b·ªã x√≥a v√¨ ko ph√π h·ª£p',
    text: '‚¨¢ Xin ch√†o b·∫°n,\n\nD·ª± √°n / cu·ªôc thi / s·ª± ki·ªán c·ªßa b·∫°n ƒë√£ b·ªã x√≥a do kh√¥ng ph√π h·ª£p v·ªõi ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa ch√∫ng m√¨nh.\n\nH√£y tham kh·∫£o ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa fanpage t·∫°i ƒë√¢y: https://sites.google.com/view/tonghopevent'
  }, {
    desc: 'B√°o d·ª± √°n c√≥ l·ª£i nhu·∫≠n',
    text: '‚¨¢ Xin ch√†o b·∫°n,\n\nD·ª± √°n / cu·ªôc thi / s·ª± ki·ªán c·ªßa b·∫°n ƒë∆∞·ª£c ƒëi·ªÅu h√†nh b·ªüi m·ªôt t·ªï ch·ª©c / c√° nh√¢n ho·∫°t ƒë·ªông c√≥ l·ª£i nhu·∫≠n. D·ª±a theo ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa ch√∫ng m√¨nh, b√†i c·ªßa b·∫°n ph·∫£i tr·∫£ ph√≠ 100.000 VNƒê ƒë·ªÉ c√≥ th·ªÉ ƒë∆∞·ª£c ƒëƒÉng b√†i l√™n fanpage nh√©.\n\nH√£y tham kh·∫£o ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa fanpage t·∫°i ƒë√¢y: https://sites.google.com/view/tonghopevent'
  }
]

class ToolsDialog extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      loading: true,
      error: false,
      showTemplates: false,
      inboxData: {},
    }
  }

  static propTypes = {
    open: PropTypes.bool.isRequired,
    closeToolsDialog: PropTypes.func.isRequired,
    name: PropTypes.string,
    psid: PropTypes.string,
  }

  async fetchData() {
    this.setState({ error: false, loading: true, showTemplates: false })
    const response = await Utils.makeRequest(
      `${Config.BACKEND}/inbox/${this.props.psid}`
    )
    const { data } = response
    if (data && Object.keys(data).length > 0) {
      this.setState({
        loading: false,
        error: false,
        inboxData: data,
      })
    } else {
      this.setState({
        error: true,
      })
    }
  }

  async sendInbox(t) {
    this.props.closeToolsDialog()
    await Utils.makeRequest(
      `${Config.BACKEND}/inbox/${this.props.psid}`,
      { message: t.text }
    )
    toast('ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng!')
  }

  _renderError() {
    return (
      <List>
        <ListItem button>
          <ListItemText primary="(C√≥ l·ªói x·∫£y ra)" />
        </ListItem>
        <ListItem button onClick={this.props.closeToolsDialog}>
          <ListItemText primary="Quay l·∫°i" />
        </ListItem>
      </List>
    )
  }

  _renderContent() {
    const { inboxData, showTemplates } = this.state

    return (
      <List>
        <ListItem button onClick={() => window.open(`https://fb.com${inboxData.link}`, '_blank')}>
          <ListItemText
            primary="ƒêi t·ªõi inbox"
            secondary={`T√™n FB: ${inboxData.senders.data[0].name}`}
          />
        </ListItem>
        <Divider />
        {!showTemplates && <ListItem button onClick={() => this.setState({showTemplates: true})}>
          <ListItemText primary={`üí¨ (Hi·ªán c√°c m·∫´u tin nh·∫Øn)`} />
        </ListItem>}
        {showTemplates && TEMPLATES.map((t, i) => {
          return <ListItem button onClick={this.sendInbox.bind(this)} key={i}>
            <ListItemText primary={`üí¨ ${t.desc}`} />
          </ListItem>
        })}
        <Divider />
        <ListItem button onClick={this.props.closeToolsDialog}>
          <ListItemText primary="Quay l·∫°i" />
        </ListItem>
      </List>
    )
  }

  render() {
    const { name, open } = this.props

    return (
      <Dialog
        open={open}
        onEnter={this.fetchData.bind(this)}
        aria-labelledby="simple-dialog-title"
      >
        <DialogTitle id="simple-dialog-title">{name ? name.substr(0,24) : ''}</DialogTitle>
        {this.state.loading
          ? <center><CircularProgress /></center>
          : this.state.error ? this._renderError() : this._renderContent()
        }
      </Dialog>
    )
  }
}

export default ToolsDialog
