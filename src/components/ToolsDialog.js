import React from 'react'
import List from '@material-ui/core/List'
import ListItem from '@material-ui/core/ListItem'
import ListItemText from '@material-ui/core/ListItemText'
import DialogTitle from '@material-ui/core/DialogTitle'
import Dialog from '@material-ui/core/Dialog'
import DialogActions from '@material-ui/core/DialogActions'
import DialogContent from '@material-ui/core/DialogContent'
import DialogContentText from '@material-ui/core/DialogContentText'
import CircularProgress from '@material-ui/core/CircularProgress'
import Button from '@material-ui/core/Button'
import Divider from '@material-ui/core/Divider'
import TextField from '@material-ui/core/TextField'
import Utils from '../Utils'
import Config from '../Config'
import PropTypes from 'prop-types'
import { toast } from 'react-toastify'
import { CopyToClipboard } from 'react-copy-to-clipboard'
import './ToolsDialog.css'

const copyObj = (obj) => JSON.parse(JSON.stringify(obj))

const TEMPLATES = [
  {
    desc: 'B√°o tr√πng b√†i',
    text: 'ƒê√£ c√≥ ng∆∞·ªùi nh·∫≠p th√¥ng tin c·ªßa d·ª± √°n / cu·ªôc thi / s·ª± ki·ªán n√†y. Kh√¥ng bi·∫øt b·∫°n c√≥ mu·ªën b·ªï sung hay thay ƒë·ªïi g√¨ kh√¥ng nh·ªâ?\n\nN·∫øu kh√¥ng, ch√∫ng m√¨nh s·∫Ω x√≥a th√¥ng tin b·∫°n ƒë√£ nh·∫≠p ƒë·ªÉ kh√¥ng b·ªã tr√πng v·ªõi b√†i ƒë√£ ƒëƒÉng.'
  },{
    desc: 'B√°o b·ªã x√≥a v√¨ ko ph√π h·ª£p',
    text: 'Xin ch√†o b·∫°n,\n\nD·ª± √°n / cu·ªôc thi / s·ª± ki·ªán c·ªßa b·∫°n ƒë√£ b·ªã x√≥a do kh√¥ng ph√π h·ª£p v·ªõi ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa ch√∫ng m√¨nh.\n\nH√£y tham kh·∫£o ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa fanpage t·∫°i ƒë√¢y: https://sites.google.com/view/tonghopevent'
  }, {
    desc: 'B√°o d·ª± √°n c√≥ l·ª£i nhu·∫≠n',
    text: 'Xin ch√†o b·∫°n,\n\nD·ª± √°n / cu·ªôc thi / s·ª± ki·ªán c·ªßa b·∫°n ƒë∆∞·ª£c ƒëi·ªÅu h√†nh b·ªüi m·ªôt t·ªï ch·ª©c / c√° nh√¢n ho·∫°t ƒë·ªông c√≥ l·ª£i nhu·∫≠n. D·ª±a theo ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa ch√∫ng m√¨nh, b√†i c·ªßa b·∫°n ph·∫£i tr·∫£ ph√≠ 100.000 VNƒê ƒë·ªÉ c√≥ th·ªÉ ƒë∆∞·ª£c ƒëƒÉng b√†i l√™n fanpage nh√©.\n\nH√£y tham kh·∫£o ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng c·ªßa fanpage t·∫°i ƒë√¢y: https://sites.google.com/view/tonghopevent'
  },
  {
    desc: 'B√°o thi·∫øu th√¥ng tin',
    text: 'Admin ƒë√£ xem b√†i vi·∫øt c·ªßa b·∫°n. Tuy nhi√™n, do b√†i vi·∫øt c·ªßa b·∫°n c√≤n thi·∫øu th√¥ng tin, nh∆∞ gi·ªõi thi·ªáu, √Ω nghƒ©a d·ª± √°n / cu·ªôc thi / s·ª± ki·ªán, n√™n ch√∫ng m√¨nh ch∆∞a th·ªÉ ph√™ duy·ªát ƒë∆∞·ª£c. B·∫°n h√£y ƒëi·ªÅn l·∫°i form v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin h∆°n nh√©!\n\nH√£y tham kh·∫£o v√≠ d·ª• sau: https://bit.ly/2TZKbee'
  },
  {
    desc: 'ƒêi·ªÅn l·∫°i (kh√¥ng paste link)',
    text: 'Admin ƒë√£ xem b√†i vi·∫øt c·ªßa b·∫°n. Tuy nhi√™n, ch√∫ng m√¨nh kh√¥ng th·ªÉ x·ª≠ l√Ω n·∫øu b·∫°n ch·ªâ copy-paste m·ªói link b√†i vi·∫øt. B·∫°n h√£y ƒëi·ªÅn l·∫°i form th·∫≠t r√µ r√†ng, bao g·ªìm c·∫£ ph·∫ßn gi·ªõi thi·ªáu, √Ω nghƒ©a d·ª± √°n / cu·ªôc thi / s·ª± ki·ªán nh√©.\n\nH√£y tham kh·∫£o v√≠ d·ª• sau: https://bit.ly/2TZKbee'
  },
]

class ToolsDialog extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      loading: true,
      error: false,
      showTemplates: true,
      sendInboxData: null,
      inboxData: {},
      isLinkCopied: false,
    }
  }

  static propTypes = {
    open: PropTypes.bool.isRequired,
    closeToolsDialog: PropTypes.func.isRequired,
    name: PropTypes.string,
    psid: PropTypes.string,
    doc: PropTypes.any.isRequired,
  }

  async fetchData() {
    this.setState({ error: false, loading: true, showTemplates: true, isLinkCopied: false })
    const response = await Utils.makeRequest(
      `${Config.BACKEND}/inbox/${this.props.psid}`
    )
    const { data } = response
    if (data && Object.keys(data).length > 0) {
      this.setState({
        loading: false,
        error: false,
        inboxData: data,
      })
    } else {
      this.setState({
        loading: false,
        error: true,
      })
    }
  }

  async sendInbox() {
    const inboxData = copyObj(this.state.sendInboxData)
    this.setState({sendInboxData: null})
    this.props.closeToolsDialog()
    const res = await Utils.makeRequest(
      `${Config.BACKEND}/inbox/${this.props.psid}`,
      'post', { message: '‚¨¢ ' + inboxData.text }
    )
    if (res.data && res.data.success) {
      toast('ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng!')
    } else {
      toast('‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è C√≥ l·ªói x·∫£y ra, ko th·ªÉ g·ª≠i tin nh·∫Øn ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è')
    }
  }

  goToPageInbox() {
    window.open(`https://fb.com${this.state.inboxData.link}`, '_blank')
  }

  _renderSendInboxDialogAsk() {
    const { sendInboxData } = this.state;
    const isWithin24HWindow = (Date.now() - this.props.doc.created) < (86400 * 1000)
    const handleClose = () => this.setState({sendInboxData: null});
    if (!sendInboxData) return null;
    else return <Dialog open={!!sendInboxData} onClose={handleClose}>
      <DialogTitle id="alert-dialog-title">{sendInboxData.desc}</DialogTitle>
      <DialogContent>
        <DialogContentText id="alert-dialog-description">
          {
            isWithin24HWindow
             ? 'G·ª≠i tin nh·∫Øn c√≥ n·ªôi dung nh∆∞ sau (c√≥ th·ªÉ s·ª≠a):'
             : 'Kh√¥ng th·ªÉ t·ª± ƒë·ªông g·ª≠i tin nh·∫Øn. H√£y copy-paste v√† inbox th·ªß c√¥ng:'
          }<br/><br/>
          <TextField
            multiline
            rowsMax="20"
            value={sendInboxData.text}
            onChange={event => {this.setState({
              sendInboxData: {
                ...sendInboxData,
                text: event.target.value,
              }
            })}}
            margin="normal"
            variant="outlined"
            fullWidth
          />
        </DialogContentText>
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose} color="primary"> Quay l·∫°i </Button>
        {!isWithin24HWindow
          && <Button onClick={() => Utils.copyTextToClipboard(sendInboxData.text)} color="primary"> Copy tin nh·∫Øn </Button>
        }
        {isWithin24HWindow
          ? <Button onClick={() => this.sendInbox()} color="primary"> G·ª¨I </Button>
          : <Button onClick={() => this.goToPageInbox()} color="primary"> ƒêi t·ªõi inbox </Button>
        }
      </DialogActions>
    </Dialog>
  }

  _renderError() {
    return (
      <List>
        <ListItem button>
          <ListItemText primary="(C√≥ l·ªói x·∫£y ra)" />
        </ListItem>
        <ListItem button onClick={this.props.closeToolsDialog}>
          <ListItemText primary="Quay l·∫°i" />
        </ListItem>
      </List>
    )
  }

  _renderContent() {
    const { inboxData, showTemplates, isLinkCopied } = this.state

    return (
      <List>
        <ListItem button onClick={this.goToPageInbox.bind(this)}>
          <ListItemText
            primary="ƒêi t·ªõi inbox"
            secondary={`T√™n FB: ${inboxData.senders.data[0].name}`}
          />
        </ListItem>
        <Divider />
        {!showTemplates && <ListItem button onClick={() => this.setState({showTemplates: true})}>
          <ListItemText primary={`üí¨ (Hi·ªán c√°c m·∫´u tin nh·∫Øn)`} />
        </ListItem>}
        {showTemplates && TEMPLATES.map((t, i) => {
          return <ListItem button onClick={() => this.setState({ sendInboxData: t })} key={i}>
            <ListItemText primary={`üí¨ ${t.desc}`} />
          </ListItem>
        })}
        <Divider />
          <CopyToClipboard
            text={`${window.location.protocol}//${window.location.host}/data/#/view/${this.props.doc.id}`}
            onCopy={() => this.setState({isLinkCopied: true})}
          >
            <ListItem button>
              <ListItemText primary={isLinkCopied ? "(ƒê√£ copy link)" : "Copy link b√†i vi·∫øt"} />
            </ListItem>
          </CopyToClipboard>
        <Divider />
        <ListItem button onClick={this.props.closeToolsDialog}>
          <ListItemText primary="Quay l·∫°i" />
        </ListItem>
      </List>
    )
  }

  render() {
    const { name, open } = this.props

    return (
      <React.Fragment>
        {this._renderSendInboxDialogAsk()}
        <Dialog
          open={open}
          onEnter={this.fetchData.bind(this)}
          onBackdropClick={this.props.closeToolsDialog}
          className="tools-dialog"
          aria-labelledby="simple-dialog-title"
        >
          <DialogTitle id="simple-dialog-title">{name ? name.substr(0,24) : ''}</DialogTitle>
          {this.state.loading
            ? <center><CircularProgress /></center>
            : this.state.error ? this._renderError() : this._renderContent()
          }
        </Dialog>
      </React.Fragment>
    )
  }
}

export default ToolsDialog
